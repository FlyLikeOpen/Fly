@using FileStorageConfig = Fly.APIImpls.Common.FileStorageConfig;
@{
    string fileStorageKey = ParseModel<string>("FileStorageKey");
    List<string> fileList = ParseModel<List<string>>("FileList");
    List<string> fileNameList = ParseModel<List<string>>("FileNameList");
    bool friendlyImageName = ParseModel<bool?>("FriendlyImageName").GetValueOrDefault(false);
    bool onlyImage = ParseModel<bool?>("OnlyImage").GetValueOrDefault(false);
    int w = ParseModel<int?>("Width").GetValueOrDefault(100);
    int h = ParseModel<int?>("Height").GetValueOrDefault(100);

    if (string.IsNullOrWhiteSpace(fileStorageKey))
    {
        fileStorageKey = "ec";
    }

    string ossAccessId, ossAccessKey, ossServer, endpoint, policy, signature;
    FileStorageConfig.GetOssConfig(out ossAccessId, out ossAccessKey, out ossServer, out endpoint);
    var configItem = FileStorageConfig.GetConfig(fileStorageKey);

    Api<IFileStorageApi>.Instance.BuildPolicyAndSignature(ossAccessKey, configItem.OssBucketName, out policy, out signature);
    endpoint = string.Format("http://{0}.{1}", configItem.OssBucketName, ossServer);
}

<div class="oss-direct-uploader">
    <input type="hidden" class="accessId" value="@ossAccessId" />
    <input type="hidden" class="endpoint" value="@endpoint" />
    <input type="hidden" class="policy" value="@policy" />
    <input type="hidden" class="signature" value="@signature" />

    <div class="file-picker">@(onlyImage ? "选择图片" : "选择文件")</div>
    <div class="file-list @Html.Raw(onlyImage ? "only-image" : "")" data-only-image="@(onlyImage ? 1 : 0)" data-w="@w" data-h="@h">
        @if (fileList != null && fileList.Count > 0)
        {
            int idx = 0;
            int index = 0;
            foreach (string file in fileList)
            {
                if (string.IsNullOrWhiteSpace(file))
                {
                    index++;
                    continue;
                }

                idx++;
                string url = Api<IFileStorageApi>.Instance.GetOriginUrl(fileStorageKey, file);
                if (url.IndexOf(".jpg", StringComparison.InvariantCultureIgnoreCase) >= 0
                    || url.IndexOf(".jpeg", StringComparison.InvariantCultureIgnoreCase) >= 0
                    || url.IndexOf(".gif", StringComparison.InvariantCultureIgnoreCase) >= 0
                    || url.IndexOf(".png", StringComparison.InvariantCultureIgnoreCase) >= 0
                    || url.IndexOf(".bmp", StringComparison.InvariantCultureIgnoreCase) >= 0)
                {
                    url = LinkUrl("CommonService/ShowImage", new { storageKey = fileStorageKey, filePath = file });
                }
                string fileName = fileNameList != null && fileNameList.Count > index ? fileNameList[index] : null;
                string name = (friendlyImageName ? (string.IsNullOrWhiteSpace(fileName) ? "文件" + idx : fileName.Trim()) : (Path.GetFileName(file)) + Path.GetExtension(file));
                if (onlyImage)
                {
                    <div class="item" id="" data-uploaded="1" data-key="@file">
                        <div class="file-image">
                            <a href="@url" target="_blank"><img src="@(Api<IPhotoApi>.Instance.GetThumbnailUrl(fileStorageKey, file, 100, 100))" /></a>
                        </div>
                        <a class="btn-remove" href="javascript:;"><i class="fa fa-times"></i></a>
                        <div class="clearfix"></div>
                    </div>
                }
                else
                {
                    <div class="item" id="" data-uploaded="1" data-key="@file">
                        <div class="file-name">
                            <a href="@url" target="_blank"><i class="fa fa-file-text"></i> @name</a>
                        </div>
                        <a class="btn-remove" href="javascript:;"><i class="fa fa-times"></i></a>
                        <div class="clearfix"></div>
                    </div>
                }
                index++;
            }
        }
    </div>
</div>