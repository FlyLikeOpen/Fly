<?xml version="1.0" encoding="utf-8"?>
<routeConfig>
	<ignore>
		<add url="{resource}.axd/{*pathInfo}" />
	</ignore>
	<map>
		<!--
		////***** route节点的属性说明 ****////
		name: 必填，string类型，唯一标示，需要确保整个网站唯一
		url: 必填，string类型，映射到的url地址模板，可以带{xxx}占位符（和标准mvc的url模板一样）
		controller: 选填，string类型，默认使用的Controller类型名称，如果该属性没有设置或设为空白，则url属性的地址模板里必须有{controller}参数
		action: 选填，string类型，默认使用的Action方法名称，如果该属性没有设置或设为空白，则url属性的地址模板里必须有{action}参数
		needLogin: 选填，bool类型，指定该路由对应页面是否需要登录身份验证，默认不设置则为false，即无需身份验证即可访问
		trace: 选填，bool类型，指定该路由对应页面的访问是否需要trace记录，默认不设置则为true，即会进行trace记录
		needSessionId: 选填，bool类型，指定该路由对应页面在被访问时，是否需要确保生成有Session Id（如果在微信中还会自动redirect到带session id的url上），默认不设置则为true
		clientCache: 选填，枚举类型，表示客户端缓存方式，有4种选项情况如下（默认不设置则为Default）：
			 ***** Default：不特别去设置客户端缓存
			 ***** None：强制客户端不能缓存
			 ***** Unchanged304：根据输出的页面数据流，没有发生变化就输出304，否则输出200（大概原理是根据页面数据流进行MD5计算，得到的值作为eTag发到客户端，后续的访问都会进行eTag和当前页面数据流MD5计算结果的比对来判断页面是否发生过变化）
			 ***** Permanent304：始终返回304给客户端（如果有配置eTag属性，那么eTag变化后客户端第一次访问会返回200，之后同一客户端继续访问则返回304；如果没有配置eTag属性，那么网站应用程序每次重启后客户端第一次访问会返回200，之后同一客户端继续访问则返回304）
		eTag: 选填，string类型，仅当clientCache属性为Permanent304时才有用，作为每次http请求header里的eTag，在clientCache属性为Permanent304的情况下，通过修改该属性值，来强制刷新客户端缓存；如果没有设置该属性，则只能通过重启网站应用来强制刷新客户端缓存
		serverCacheExpiredMinutes: 选填，int类型，表示服务端页面数据缓存的时间，单位为分钟，如果小于或等于0，则不做服务器端页面数据缓存，该属性默认不设置则为0
		domain: 选填，string类型，在根据该路由来生成url时所使用的域名，可以支持是https的；如果该属性没有设置或设为空白，则默认使用上级节点map的domain属性值；如果map的domain也没有设置或设为空白，生成相对路径url
		redirectUrlForOtherDevices: 选填，仅当上级节点map的deviceType属性有配置时才有用，表示访问该路由所对应页面的请求所来自的设备不是上级节点map的deviceType属性所配置的设备，那么就会Redirect到的地址（比如一个手机端msite的页面地址），如果该属性没有设置则使用上级map节点的redirectUrlForOtherDevices地址，如果都没有设置则不做跳转（上级节点map的deviceType属性没有配置时，也不做跳转）
		authKey: 选填，表示访问该url的请求需要带有的权限点字符串，如果不配置或配置为空，则表示该url上不做权限验证
    
    //// **** route节点的下级节点说明 ***////
    parameters: 相当MVC路由里的参数，其下的add节点有name、value和constraint三个属性
    extProperties: 用来扩展的配置属性，其下add节点有name、value两个属性，在程序里可以通过RouteHelper.GetCurrentConfigExtPropertyValue(name)来获取到value的值
		-->

    <route name="InStockRequest/Ping" url="ping" controller="InStockRequest" action="Ping" needLogin="false"/>
    <route name="InStockRequest/InStockRequestCreate" url="InStockRequest/InStockRequestCreate" controller="InStockRequest" action="InStockRequestCreate" needLogin="true" />
    <route name="InStockRequest/InStockResultCancel" url="InStockRequest/InStockResultCancel" controller="InStockRequest" action="InStockResultCancel" needLogin="true" />
	  <route name="InStockRequest/InStockRequestConfirm" url="InStockRequest/InStockRequestConfirm" controller="InStockRequest" action="InStockRequestConfirm" needLogin="true"/>

    <route name="SO/Create" url="SO/Create" controller="SO" action="Create" needLogin="true"/>
    <route name="SO/SoChange" url="SO/SoChange" controller="SO" action="SoChange" needLogin="true"/>
    <route name="SO/ReDroppingToWH" url="SO/ReDroppingToWH" controller="SO" action="ReDroppingToWH" needLogin="true"/>
    

  </map>
</routeConfig>