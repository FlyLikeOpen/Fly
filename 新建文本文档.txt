
DECLARE @order TABLE([OutboundOn] DATETIME,[SOId] UNIQUEIDENTIFIER,[ProcessedOn] DATETIME,[TwoFour] INT,[FourEight] INT,[SevenTwo] INT,[Other] INT,[AllCount] INT)
INSERT INTO @order([OutboundOn],[SOId],[ProcessedOn],[TwoFour],[FourEight],[SevenTwo],[Other],[AllCount]) 
SELECT CONVERT(VARCHAR(10), a.[OutboundOn], 23) AS OutboundOn ,b.[SOId],c.[ProcessedOn],
	CASE WHEN DATEPART ( WEEKDAY ,c.[ProcessedOn])=1 OR DATEPART ( WEEKDAY ,c.[ProcessedOn])=7 THEN 
	  CASE WHEN a.[OutboundOn]<= DateAdd(dd,2,c.[ProcessedOn]) THEN 1 ELSE 0 END
	ELSE 
	  CASE WHEN a.[OutboundOn]<= DateAdd(dd,1,c.[ProcessedOn]) THEN 1 ELSE 0 END
	END  AS TwoFour,
	CASE WHEN DATEPART ( WEEKDAY ,c.[ProcessedOn])=1 or DATEPART ( WEEKDAY ,c.[ProcessedOn])=7 THEN 
		CASE WHEN a.[OutboundOn]<= DateAdd(dd,4,c.[ProcessedOn]) and  a.[OutboundOn]> DateAdd(dd,2,c.[ProcessedOn]) THEN 1 ELSE 0 END
	ELSE
		CASE WHEN a.[OutboundOn]<= DateAdd(dd,2,c.[ProcessedOn]) and  a.[OutboundOn]> DateAdd(dd,1,c.[ProcessedOn]) THEN 1 ELSE 0 END
	END	 AS FourEight,
	CASE WHEN DATEPART ( WEEKDAY ,c.[ProcessedOn])=1 or DATEPART ( WEEKDAY ,c.[ProcessedOn])=7 THEN 
		CASE WHEN a.[OutboundOn]<= DateAdd(dd,6,c.[ProcessedOn]) and a.[OutboundOn] >DateAdd(dd,4,c.[ProcessedOn]) THEN 1 ELSE 0 END 
	ELSE	
		CASE WHEN a.[OutboundOn]<= DateAdd(dd,3,c.[ProcessedOn]) and a.[OutboundOn] >DateAdd(dd,2,c.[ProcessedOn]) THEN 1 ELSE 0 END 
	END	AS SevenTwo,
	CASE WHEN DATEPART ( WEEKDAY ,c.[ProcessedOn])=1 or DATEPART ( WEEKDAY ,c.[ProcessedOn])=7 THEN 
		CASE WHEN a.[OutboundOn] > DateAdd(dd,6,c.[ProcessedOn]) THEN 1 ELSE 0 END
	ELSE
		CASE WHEN a.[OutboundOn] > DateAdd(dd,3,c.[ProcessedOn]) THEN 1 ELSE 0 END
	END	 AS Other,
	1 AS AllCount
		FROM
	[WMSCenter.Sales].[dbo].[SOOutboundBatch] AS a WITH(NOLOCK)
		INNER JOIN 
	[WMSCenter.Sales].[dbo].[SOOutboundBatchItem] AS b WITH(NOLOCK) ON a.[Id] =b.[BatchId]
		LEFT JOIN 
	(SELECT * FROM (SELECT ROW_NUMBER() OVER (PARTITION BY [SOId] ORDER BY [ProcessedOn] DESC) AS rid,* FROM [WMSCenter.Sales].[dbo].[SOProcessLog]  WITH(NOLOCK) WHERE [ProcessLogType]=300) AS tt WHERE tt.[rid]=1) AS c
		ON c.[SOId]= b.[SOId]


--按天查询
SELECT
	CONVERT(VARCHAR(10), a.[OutboundOn], 23) AS [Date],
	SUM(a.[AllCount]) AS [TotalCount],
	SUM(a.[TwoFour]) AS [NormalCount],
	SUM(a.[FourEight]) AS [Later1DayCount],
	SUM(a.[SevenTwo]) AS [Later2DayCount],
	SUM(a.[Other]) AS [EarlyDayCount]
FROM
	@order AS a 
GROUP BY
CONVERT(VARCHAR(10), a.[OutboundOn], 23)

--按周查询
SELECT
	CONVERT(VARCHAR(4), YEAR(a.[OutboundOn]))  + '年第' + ISNULL(REPLICATE('0', 2 - LEN(DATENAME(WEEK, a.[OutboundOn]))), '')  + DATENAME(WEEK, a.[OutboundOn]) +'周' AS [Date],
	SUM(a.[AllCount]) AS [TotalCount],
	SUM(a.[TwoFour]) AS [NormalCount],
	SUM(a.[FourEight]) AS [Later1DayCount],
	SUM(a.[SevenTwo]) AS [Later2DayCount],
	SUM(a.[Other]) AS [EarlyDayCount]
FROM
	@order AS a 
GROUP BY
CONVERT(VARCHAR(4), YEAR(a.[OutboundOn]))  + '年第' + ISNULL(REPLICATE('0', 2 - LEN(DATENAME(WEEK, a.[OutboundOn]))), '')  + DATENAME(WEEK, a.[OutboundOn]) +'周'

--按月查询
SELECT
	CONVERT(VARCHAR(7), a.[OutboundOn], 23) AS [Date],
	SUM(a.[AllCount]) AS [TotalCount],
	SUM(a.[TwoFour]) AS [NormalCount],
	SUM(a.[FourEight]) AS [Later1DayCount],
	SUM(a.[SevenTwo]) AS [Later2DayCount],
	SUM(a.[Other]) AS [EarlyDayCount]
FROM
	@order AS a 
GROUP BY
CONVERT(VARCHAR(7), a.[OutboundOn], 23)